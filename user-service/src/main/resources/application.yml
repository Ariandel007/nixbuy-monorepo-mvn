server:
  port: ${PORT:3801}
spring:
  application:
    name: user-service-nixbuy
  datasource:
    initialization-mode: always
    username: ${BD_USERNAME:postgres}
    url: ${BD_URL:jdbc:postgresql://host.docker.internal:5432/nixbuy_security}
    platform: postgres
    password: ${BD_PASSWORD:admin}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: 'true'
        format_sql: true
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
#    kafka:
#      bootstrap-servers: host.docker.internal:9092
#      properties:
#        security.protocol: PLAINTEXT  # Protocolo de seguridad (puede variar según tu configuración)
#      producer:
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer  # Serializador de clave (puede variar)
#        value-serializer: org.apache.kafka.common.serialization.StringSerializer  # Serializador de valor (puede variar)

#  profiles:
#    active: development
#  cloud:
#    config:
#      uri: http://host.docker.internal:8888
logging:
  pattern:
  #    level: %{5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]}
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE

#The port 4317 is for gRPC, which is lighter than the HTTP protocol.
tracing:
  url: ${TRACING_URL_ENDPOINT:http://host.docker.internal:4317}
management:
#  zipkin:
#    tracing:
#      endpoint: ${TRACING_URL_ENDPOINT:http://host.docker.internal:9411/api/v2/spans}
# el sampling probability en 0.1 esta bien en un entorno de produccion
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

nixbuy:
  cloudinaryParams:
    cloudName: ${CLOUDINARY_CLOUD_NAME}
    apiKey: ${CLOUDINARY_API_KEY}
    apiSecret: ${CLOUDINARY_SECRET}
springdoc:
  api-docs:
    enabled: ${SHOW_OPEN_API:true}  # Habilita los endpoints /v3/api-docs y /v3/api-docs.yaml
  swagger-ui:
    enabled: ${SHOW_OPEN_API:true}
    url: /openapi.yaml
    path: /swagger-ui.html
# Swagger UI: http://localhost:3803/swagger-ui.html
# OpenAPI JSON: http://localhost:3803/v3/api-docs
# OpenAPI YAML: http://localhost:3803/v3/api-docs.yaml
